@model IEnumerable<Shop.Models.Order>
@using Shop.Models

@{
    ViewData["Title"] = "Мой профиль и заказы";
    var user = ViewBag.User as User;
}

@if (TempData["Message"] != null)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        @TempData["Message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="container py-4">
    <div class="profile-section mb-5">
        <div class="profile-header">
            <h3 class="profile-title"><i class="bi bi-person-gear me-2"></i>Мой профиль</h3>
        </div>
        <div class="profile-content">
            <form asp-action="EditProfile" method="post" class="profile-form">
                @Html.AntiForgeryToken()

                <div class="form-grid">
                    <div class="form-group">
                        <label for="Login" class="form-label">
                            <i class="bi bi-person-badge me-2"></i>Логин
                        </label>
                        <div class="input-wrapper">
                            <input type="text" class="form-control" id="Login" name="Login"
                                   value="@user.Login" required placeholder="Ваш логин">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="Email" class="form-label">
                            <i class="bi bi-envelope me-2"></i>Электронная почта
                        </label>
                        <div class="input-wrapper">
                            <input type="email" class="form-control" id="Email" name="Email"
                                   value="@user.Email" required placeholder="example@mail.com">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="PhoneNumber" class="form-label">
                            <i class="bi bi-phone me-2"></i>Номер телефона
                        </label>
                        <div class="input-wrapper">
                            <input type="tel" class="form-control" id="PhoneNumber" name="PhoneNumber"
                                   value="@user.PhoneNumber" pattern="\+375\((29|33|44|25)\)\d{3}-\d{2}-\d{2}"
                                   required placeholder="+375(XX)XXX-XX-XX">
                        </div>
                        <div class="form-hint">
                            Формат: +375(29/33/44/25)XXX-XX-XX
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="NewPassword" class="form-label">
                            <i class="bi bi-key me-2"></i>Новый пароль
                        </label>
                        <div class="input-wrapper">
                            <input type="password" class="form-control" id="NewPassword" name="NewPassword"
                                   placeholder="Введите новый пароль">
                        </div>
                        <div class="form-hint">
                            Оставьте пустым, если не хотите менять
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="CurrentPassword" class="form-label">
                            <i class="bi bi-shield-lock me-2"></i>Текущий пароль
                        </label>
                        <div class="input-wrapper">
                            <input type="password" class="form-control" id="CurrentPassword"
                                   name="CurrentPassword" required placeholder="Подтвердите текущий пароль">
                        </div>
                        <div class="form-hint">
                            Для подтверждения изменений
                        </div>
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn-save">
                        <i class="bi bi-check-circle me-2"></i>Сохранить изменения
                    </button>
                </div>
            </form>
        </div>
    </div>

    <h3 class="mb-4">Мои заказы</h3>

    @if (!Model.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-cart-x fs-1 text-muted"></i>
            <p class="fs-5 text-muted mt-3">У вас пока нет заказов</p>
            <a href="@Url.Action("Index", "Home")" class="btn btn-primary mt-3">Перейти в каталог</a>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var order in Model)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm transition-all position-relative">
                        <div class="position-absolute top-0 start-0 w-100" style="height: 4px; background: @GetStatusLineColor(order.Status)"></div>

                        <div class="card-header bg-white border-0 pt-4 pb-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0 text-dark fw-bold">Заказ #@order.Id</h5>
                                <span class="badge rounded-pill @GetStatusBadgeClass(order.Status) border @GetStatusBorderClass(order.Status)">
                                    @order.Status
                                </span>
                            </div>
                            <div class="text-muted small mt-1">
                                <i class="bi bi-calendar me-1"></i> @order.OrderDate.ToString("dd.MM.yyyy HH:mm")
                            </div>
                        </div>

                        <div class="card-body pt-0">
                            <h6 class="fw-semibold">@order.Product</h6>
                            <div class="d-flex justify-content-between text-muted small mb-3">
                                <div>
                                    <i class="bi bi-box-seam me-1"></i> @order.Quantity шт.
                                </div>
                                <div class="fw-bold text-dark">
                                    @order.Price.ToString("N2") <span class="fs-6 text-muted">Br</span>
                                </div>
                            </div>

                            <div class="border-top pt-3">
                                <p class="mb-1 small text-muted">Адрес доставки:</p>
                                <p class="mb-2 fw-medium text-dark">@order.CustomerAddress</p>

                                @if (!string.IsNullOrWhiteSpace(order.Comment))
                                {
                                    <p class="mb-1 small text-muted">Комментарий:</p>
                                    <p class="mb-0">@order.Comment</p>
                                }
                            </div>
                        </div>

                        <div class="card-footer bg-white border-0 pt-0 pb-3">
                            @if (order.Status != "Отменён" && order.Status != "Доставлен" && order.Status != "Завершен")
                            {
                                <form method="post" action="@Url.Action("CancelOrder", "Account")">
                                    <input type="hidden" name="orderId" value="@order.Id" />
                                    <button type="submit" class="btn btn-outline-danger w-100 rounded-pill py-2">
                                        <i class="bi bi-x-circle me-1"></i> Отменить заказ
                                    </button>
                                </form>
                            }
                            else if (order.Status == "Доставлен" || order.Status == "Завершен")
                            {
                                <button class="btn btn-success w-100 rounded-pill py-2" disabled>
                                    <i class="bi bi-check-circle me-1"></i> Заказ получен
                                </button>
                            }
                            else
                            {
                                <div class="text-center text-muted small py-2">
                                    <i class="bi bi-info-circle me-1"></i> Заказ был отменён
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@functions {
    string GetStatusBadgeClass(string status)
    {
        switch (status)
        {
            case "Новый": return "bg-primary text-white";
            case "Подтверждён": return "bg-success text-white";
            case "В обработке": return "bg-info text-dark";
            case "Доставляется": return "bg-warning text-dark";
            case "Доставлен": return "bg-teal text-white";
            case "Завершен": return "bg-dark text-white";
            case "Отменён": return "bg-secondary text-white";
            default: return "bg-light text-dark";
        }
    }

    string GetStatusBorderClass(string status)
    {
        switch (status)
        {
            case "Новый": return "border-primary";
            case "Подтверждён": return "border-success";
            case "В обработке": return "border-info";
            case "Доставляется": return "border-warning";
            case "Доставлен": return "border-teal";
            case "Завершен": return "border-dark";
            case "Отменён": return "border-secondary";
            default: return "border-light";
        }
    }

    string GetStatusLineColor(string status)
    {
        switch (status)
        {
            case "Новый": return "var(--bs-primary)";
            case "Подтверждён": return "var(--bs-success)";
            case "В обработке": return "var(--bs-info)";
            case "Доставляется": return "var(--bs-warning)";
            case "Доставлен": return "#20c997";
            case "Завершен": return "var(--bs-dark)";
            case "Отменён": return "var(--bs-secondary)";
            default: return "#e9ecef";
        }
    }
}

<style>
    .card {
        border-radius: 12px;
        overflow: hidden;
        border: 1px solid rgba(0, 0, 0, 0.08);
    }

    .badge {
        font-weight: 500;
        padding: 0.35em 0.65em;
        font-size: 0.85em;
    }

    .bg-teal {
        background-color: #20c997 !important;
    }

    .border-teal {
        border-color: #20c997 !important;
    }

    .text-teal {
        color: #20c997 !important;
    }

    .transition-all {
        transition: all 0.3s ease;
    }

    .hover-shadow:hover {
        transform: translateY(-3px);
        box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.15) !important;
    }


    /* Основные стили профиля */
    .profile-section {
        background-color: #1a1a1a;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid rgba(255,255,255,0.1);
    }

    .profile-header {
        padding: 1.25rem 1.5rem;
        background-color: rgba(0,0,0,0.2);
        border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .profile-title {
        margin: 0;
        color: #74b9ff;
        font-size: 1.25rem;
        font-weight: 500;
    }

    .profile-content {
        padding: 1.5rem;
    }

    /* Сетка формы */
    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.25rem;
    }

    /* Группы полей */
    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        color: #dfe6e9;
        font-size: 0.9rem;
    }

    .input-wrapper {
        position: relative;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        background-color: rgba(255,255,255,0.05);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 6px;
        color: #ffffff; /* Белый цвет текста */
        transition: all 0.3s ease;
    }

        /* Стили для текста в placeholder */
        .form-control::placeholder {
            color: rgba(255,255,255,0.5);
        }

        /* Стили для активного состояния */
        .form-control:focus {
            background-color: rgba(255,255,255,0.1);
            border-color: #74b9ff;
            box-shadow: 0 0 0 0.2rem rgba(116, 185, 255, 0.25);
            outline: none;
            color: #ffffff; /* Белый цвет текста при фокусе */
        }

        /* Стили для введенного текста */
        .form-control:not(:placeholder-shown) {
            color: #ffffff; /* Белый цвет для введенного текста */
        }

    .form-hint {
        font-size: 0.75rem;
        color: #b2bec3;
        margin-top: 0.5rem;
    }

    /* Кнопка сохранения */
    .form-actions {
        margin-top: 1.5rem;
        text-align: right;
    }

    .btn-save {
        background-color: #6c5ce7;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-weight: 500;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
    }

        .btn-save:hover {
            background-color: #5649c0;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

    /* Адаптивность */
    @@media (max-width: 768px) {
        .form-grid {
            grid-template-columns: 1fr;
        }

        .profile-content {
            padding: 1rem;
        }
    }
</style>



@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("PhoneNumber").addEventListener("input", function () {
                let value = this.value.replace(/\D/g, "");

                if (value.startsWith("375")) {
                    value = value.slice(3);
                }

                if (value.length > 9) {
                    value = value.slice(0, 9);
                }

                let formatted = "+375";
                if (value.length > 0) formatted += "(" + value.slice(0, 2);
                if (value.length >= 3) formatted += ")" + value.slice(2, 5);
                if (value.length >= 6) formatted += "-" + value.slice(5, 7);
                if (value.length >= 8) formatted += "-" + value.slice(7, 9);

                this.value = formatted;
            });
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}